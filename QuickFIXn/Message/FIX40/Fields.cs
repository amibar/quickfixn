//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using QuickFix.Fields;

namespace QuickFix.FIX40.Fields
{
    /// <summary>
    /// Account Field
    /// </summary>/
    public sealed class Account : StringField
    {
        public Account()
            :base(Tags.Account) {}
        public Account(string val)
            :base(Tags.Account, val) {}

    }


    /// <summary>
    /// AdvId Field
    /// </summary>/
    public sealed class AdvId : IntField
    {
        public AdvId()
            :base(Tags.AdvId) {}
        public AdvId(int val)
            :base(Tags.AdvId, val) {}

    }


    /// <summary>
    /// AdvRefID Field
    /// </summary>/
    public sealed class AdvRefID : IntField
    {
        public AdvRefID()
            :base(Tags.AdvRefID) {}
        public AdvRefID(int val)
            :base(Tags.AdvRefID, val) {}

    }


    /// <summary>
    /// AdvSide Field
    /// </summary>/
    public sealed class AdvSide : StringField
    {
        public AdvSide()
            :base(Tags.AdvSide) {}
        public AdvSide(string val)
            :base(Tags.AdvSide, val) {}


        // Field Enumerations
        public const string BUY = "B";
        public const string SELL = "S";
        public const string CROSS = "X";
        public const string TRADE = "T";
    }


    /// <summary>
    /// AdvTransType Field
    /// </summary>/
    public sealed class AdvTransType : StringField
    {
        public AdvTransType()
            :base(Tags.AdvTransType) {}
        public AdvTransType(string val)
            :base(Tags.AdvTransType, val) {}


        // Field Enumerations
        public const string NEW = "N";
        public const string CANCEL = "C";
        public const string REPLACE = "R";
    }


    /// <summary>
    /// AvgPx Field
    /// </summary>/
    public sealed class AvgPx : DecimalField
    {
        public AvgPx()
            :base(Tags.AvgPx) {}
        public AvgPx(Decimal val)
            :base(Tags.AvgPx, val) {}

    }


    /// <summary>
    /// ClOrdID Field
    /// </summary>/
    public sealed class ClOrdID : StringField
    {
        public ClOrdID()
            :base(Tags.ClOrdID) {}
        public ClOrdID(string val)
            :base(Tags.ClOrdID, val) {}

    }


    /// <summary>
    /// Commission Field
    /// </summary>/
    public sealed class Commission : DecimalField
    {
        public Commission()
            :base(Tags.Commission) {}
        public Commission(Decimal val)
            :base(Tags.Commission, val) {}

    }


    /// <summary>
    /// CommType Field
    /// </summary>/
    public sealed class CommType : StringField
    {
        public CommType()
            :base(Tags.CommType) {}
        public CommType(string val)
            :base(Tags.CommType, val) {}


        // Field Enumerations
        public const string PER_SHARE = "1";
        public const string PERCENTAGE = "2";
        public const string ABSOLUTE = "3";
    }


    /// <summary>
    /// CumQty Field
    /// </summary>/
    public sealed class CumQty : IntField
    {
        public CumQty()
            :base(Tags.CumQty) {}
        public CumQty(int val)
            :base(Tags.CumQty, val) {}

    }


    /// <summary>
    /// Currency Field
    /// </summary>/
    public sealed class Currency : StringField
    {
        public Currency()
            :base(Tags.Currency) {}
        public Currency(string val)
            :base(Tags.Currency, val) {}

    }


    /// <summary>
    /// ExecID Field
    /// </summary>/
    public sealed class ExecID : IntField
    {
        public ExecID()
            :base(Tags.ExecID) {}
        public ExecID(int val)
            :base(Tags.ExecID, val) {}

    }


    /// <summary>
    /// ExecInst Field
    /// </summary>/
    public sealed class ExecInst : StringField
    {
        public ExecInst()
            :base(Tags.ExecInst) {}
        public ExecInst(string val)
            :base(Tags.ExecInst, val) {}


        // Field Enumerations
        public const string NOT_HELD = "1";
        public const string WORK = "2";
        public const string GO_ALONG = "3";
        public const string OVER_THE_DAY = "4";
        public const string HELD = "5";
        public const string PARTICIPATE_DONT_INITIATE = "6";
        public const string STRICT_SCALE = "7";
        public const string TRY_TO_SCALE = "8";
        public const string STAY_ON_BIDSIDE = "9";
        public const string STAY_ON_OFFERSIDE = "0";
        public const string NO_CROSS = "A";
        public const string OK_TO_CROSS = "B";
        public const string CALL_FIRST = "C";
        public const string PERCENT_OF_VOLUME = "D";
        public const string DO_NOT_INCREASE_DNI = "E";
        public const string DO_NOT_REDUCE_DNR = "F";
        public const string ALL_OR_NONE_AON = "G";
        public const string INSTITUTIONS_ONLY = "I";
        public const string LAST_PEG = "L";
        public const string MIDPRICE_PEG = "M";
        public const string NONNEGOTIABLE = "N";
        public const string OPENING_PEG = "O";
        public const string MARKET_PEG = "P";
        public const string PRIMARY_PEG = "R";
        public const string SUSPEND = "S";
    }


    /// <summary>
    /// ExecRefID Field
    /// </summary>/
    public sealed class ExecRefID : IntField
    {
        public ExecRefID()
            :base(Tags.ExecRefID) {}
        public ExecRefID(int val)
            :base(Tags.ExecRefID, val) {}

    }


    /// <summary>
    /// ExecTransType Field
    /// </summary>/
    public sealed class ExecTransType : StringField
    {
        public ExecTransType()
            :base(Tags.ExecTransType) {}
        public ExecTransType(string val)
            :base(Tags.ExecTransType, val) {}


        // Field Enumerations
        public const string NEW = "0";
        public const string CANCEL = "1";
        public const string CORRECT = "2";
        public const string STATUS = "3";
    }


    /// <summary>
    /// HandlInst Field
    /// </summary>/
    public sealed class HandlInst : StringField
    {
        public HandlInst()
            :base(Tags.HandlInst) {}
        public HandlInst(string val)
            :base(Tags.HandlInst, val) {}


        // Field Enumerations
        public const string AUTOMATED_EXECUTION_ORDER_PRIVATE_NO_BROKER_INTERVENTION = "1";
        public const string AUTOMATED_EXECUTION_ORDER_PUBLIC_BROKER_INTERVENTION_OK = "2";
        public const string MANUAL_ORDER_BEST_EXECUTION = "3";
    }


    /// <summary>
    /// IDSource Field
    /// </summary>/
    public sealed class IDSource : StringField
    {
        public IDSource()
            :base(Tags.IDSource) {}
        public IDSource(string val)
            :base(Tags.IDSource, val) {}


        // Field Enumerations
        public const string CUSIP = "1";
        public const string SEDOL = "2";
        public const string QUIK = "3";
        public const string ISIN_NUMBER = "4";
        public const string RIC_CODE = "5";
    }


    /// <summary>
    /// IOIid Field
    /// </summary>/
    public sealed class IOIid : IntField
    {
        public IOIid()
            :base(Tags.IOIid) {}
        public IOIid(int val)
            :base(Tags.IOIid, val) {}

    }


    /// <summary>
    /// IOIOthSvc Field
    /// </summary>/
    public sealed class IOIOthSvc : StringField
    {
        public IOIOthSvc()
            :base(Tags.IOIOthSvc) {}
        public IOIOthSvc(string val)
            :base(Tags.IOIOthSvc, val) {}

    }


    /// <summary>
    /// IOIQltyInd Field
    /// </summary>/
    public sealed class IOIQltyInd : StringField
    {
        public IOIQltyInd()
            :base(Tags.IOIQltyInd) {}
        public IOIQltyInd(string val)
            :base(Tags.IOIQltyInd, val) {}


        // Field Enumerations
        public const string LOW = "L";
        public const string MEDIUM = "M";
        public const string HIGH = "H";
    }


    /// <summary>
    /// IOIRefID Field
    /// </summary>/
    public sealed class IOIRefID : IntField
    {
        public IOIRefID()
            :base(Tags.IOIRefID) {}
        public IOIRefID(int val)
            :base(Tags.IOIRefID, val) {}

    }


    /// <summary>
    /// IOIShares Field
    /// </summary>/
    public sealed class IOIShares : StringField
    {
        public IOIShares()
            :base(Tags.IOIShares) {}
        public IOIShares(string val)
            :base(Tags.IOIShares, val) {}

    }


    /// <summary>
    /// IOITransType Field
    /// </summary>/
    public sealed class IOITransType : StringField
    {
        public IOITransType()
            :base(Tags.IOITransType) {}
        public IOITransType(string val)
            :base(Tags.IOITransType, val) {}


        // Field Enumerations
        public const string NEW = "N";
        public const string CANCEL = "C";
        public const string REPLACE = "R";
    }


    /// <summary>
    /// LastCapacity Field
    /// </summary>/
    public sealed class LastCapacity : StringField
    {
        public LastCapacity()
            :base(Tags.LastCapacity) {}
        public LastCapacity(string val)
            :base(Tags.LastCapacity, val) {}


        // Field Enumerations
        public const string AGENT = "1";
        public const string CROSS_AS_AGENT = "2";
        public const string CROSS_AS_PRINCIPAL = "3";
        public const string PRINCIPAL = "4";
    }


    /// <summary>
    /// LastMkt Field
    /// </summary>/
    public sealed class LastMkt : StringField
    {
        public LastMkt()
            :base(Tags.LastMkt) {}
        public LastMkt(string val)
            :base(Tags.LastMkt, val) {}

    }


    /// <summary>
    /// LastPx Field
    /// </summary>/
    public sealed class LastPx : DecimalField
    {
        public LastPx()
            :base(Tags.LastPx) {}
        public LastPx(Decimal val)
            :base(Tags.LastPx, val) {}

    }


    /// <summary>
    /// LastShares Field
    /// </summary>/
    public sealed class LastShares : IntField
    {
        public LastShares()
            :base(Tags.LastShares) {}
        public LastShares(int val)
            :base(Tags.LastShares, val) {}

    }


    /// <summary>
    /// LinesOfText Field
    /// </summary>/
    public sealed class LinesOfText : IntField
    {
        public LinesOfText()
            :base(Tags.LinesOfText) {}
        public LinesOfText(int val)
            :base(Tags.LinesOfText, val) {}

    }


    /// <summary>
    /// MsgType Field
    /// </summary>/
    public sealed class MsgType : StringField
    {
        public MsgType()
            :base(Tags.MsgType) {}
        public MsgType(string val)
            :base(Tags.MsgType, val) {}

    }


    /// <summary>
    /// OrderID Field
    /// </summary>/
    public sealed class OrderID : StringField
    {
        public OrderID()
            :base(Tags.OrderID) {}
        public OrderID(string val)
            :base(Tags.OrderID, val) {}

    }


    /// <summary>
    /// OrderQty Field
    /// </summary>/
    public sealed class OrderQty : IntField
    {
        public OrderQty()
            :base(Tags.OrderQty) {}
        public OrderQty(int val)
            :base(Tags.OrderQty, val) {}

    }


    /// <summary>
    /// OrdStatus Field
    /// </summary>/
    public sealed class OrdStatus : StringField
    {
        public OrdStatus()
            :base(Tags.OrdStatus) {}
        public OrdStatus(string val)
            :base(Tags.OrdStatus, val) {}


        // Field Enumerations
        public const string NEW = "0";
        public const string PARTIALLY_FILLED = "1";
        public const string FILLED = "2";
        public const string DONE_FOR_DAY = "3";
        public const string CANCELED = "4";
        public const string REPLACED = "5";
        public const string PENDING_CANCELREPLACE = "6";
        public const string STOPPED = "7";
        public const string REJECTED = "8";
        public const string SUSPENDED = "9";
        public const string PENDING_NEW = "A";
        public const string CALCULATED = "B";
        public const string EXPIRED = "C";
    }


    /// <summary>
    /// OrdType Field
    /// </summary>/
    public sealed class OrdType : StringField
    {
        public OrdType()
            :base(Tags.OrdType) {}
        public OrdType(string val)
            :base(Tags.OrdType, val) {}


        // Field Enumerations
        public const string MARKET = "1";
        public const string LIMIT = "2";
        public const string STOP = "3";
        public const string STOP_LIMIT = "4";
        public const string MARKET_ON_CLOSE = "5";
        public const string WITH_OR_WITHOUT = "6";
        public const string LIMIT_OR_BETTER = "7";
        public const string LIMIT_WITH_OR_WITHOUT = "8";
        public const string ON_BASIS = "9";
        public const string ON_CLOSE = "A";
        public const string LIMIT_ON_CLOSE = "B";
        public const string FOREX = "C";
        public const string PREVIOUSLY_QUOTED = "D";
        public const string PREVIOUSLY_INDICATED = "E";
        public const string PEGGED = "P";
    }


    /// <summary>
    /// OrigClOrdID Field
    /// </summary>/
    public sealed class OrigClOrdID : StringField
    {
        public OrigClOrdID()
            :base(Tags.OrigClOrdID) {}
        public OrigClOrdID(string val)
            :base(Tags.OrigClOrdID, val) {}

    }


    /// <summary>
    /// OrigTime Field
    /// </summary>/
    public sealed class OrigTime : DateTimeField
    {
        public OrigTime()
            :base(Tags.OrigTime) {}
        public OrigTime(DateTime val)
            :base(Tags.OrigTime, val) {}
        public OrigTime(DateTime val, bool showMilliseconds)
	    :base(Tags.OrigTime, val, showMilliseconds) {}

    }


    /// <summary>
    /// Price Field
    /// </summary>/
    public sealed class Price : DecimalField
    {
        public Price()
            :base(Tags.Price) {}
        public Price(Decimal val)
            :base(Tags.Price, val) {}

    }


    /// <summary>
    /// RelatdSym Field
    /// </summary>/
    public sealed class RelatdSym : StringField
    {
        public RelatdSym()
            :base(Tags.RelatdSym) {}
        public RelatdSym(string val)
            :base(Tags.RelatdSym, val) {}

    }


    /// <summary>
    /// Rule80A Field
    /// </summary>/
    public sealed class Rule80A : StringField
    {
        public Rule80A()
            :base(Tags.Rule80A) {}
        public Rule80A(string val)
            :base(Tags.Rule80A, val) {}


        // Field Enumerations
        public const string AGENCY_SINGLE_ORDER = "A";
        public const string PROGRAM_ORDER_INDEX_ARB_FOR_MEMBER_FIRMORG = "D";
        public const string PROGRAM_ORDER_NONINDEX_ARB_FOR_MEMBER_FIRMORG = "C";
        public const string PROGRAM_ORDER_INDEX_ARB_FOR_INDIVIDUAL_CUSTOMER = "J";
        public const string PROGRAM_ORDER_NONINDEX_ARB_FOR_INDIVIDUAL_CUSTOMER = "K";
        public const string PROGRAM_ORDER_INDEX_ARB_FOR_OTHER_AGENCY = "U";
        public const string PROGRAM_ORDER_NONINDEX_ARB_FOR_OTHER_AGENCY = "Y";
        public const string PROGRAM_ORDER_INDEX_ARB_FOR_OTHER_MEMBER = "M";
        public const string PROGRAM_ORDER_NONINDEX_ARB_FOR_OTHER_MEMBER = "N";
        public const string ALL_OTHER_ORDERS_AS_AGENT_FOR_OTHER_MEMBER = "W";
    }


    /// <summary>
    /// SecurityID Field
    /// </summary>/
    public sealed class SecurityID : StringField
    {
        public SecurityID()
            :base(Tags.SecurityID) {}
        public SecurityID(string val)
            :base(Tags.SecurityID, val) {}

    }


    /// <summary>
    /// Shares Field
    /// </summary>/
    public sealed class Shares : IntField
    {
        public Shares()
            :base(Tags.Shares) {}
        public Shares(int val)
            :base(Tags.Shares, val) {}

    }


    /// <summary>
    /// Side Field
    /// </summary>/
    public sealed class Side : StringField
    {
        public Side()
            :base(Tags.Side) {}
        public Side(string val)
            :base(Tags.Side, val) {}


        // Field Enumerations
        public const string BUY = "1";
        public const string SELL = "2";
        public const string BUY_MINUS = "3";
        public const string SELL_PLUS = "4";
        public const string SELL_SHORT = "5";
        public const string SELL_SHORT_EXEMPT = "6";
    }


    /// <summary>
    /// Symbol Field
    /// </summary>/
    public sealed class Symbol : StringField
    {
        public Symbol()
            :base(Tags.Symbol) {}
        public Symbol(string val)
            :base(Tags.Symbol, val) {}

    }


    /// <summary>
    /// TimeInForce Field
    /// </summary>/
    public sealed class TimeInForce : StringField
    {
        public TimeInForce()
            :base(Tags.TimeInForce) {}
        public TimeInForce(string val)
            :base(Tags.TimeInForce, val) {}


        // Field Enumerations
        public const string DAY = "0";
        public const string GOOD_TILL_CANCEL = "1";
        public const string AT_THE_OPENING = "2";
        public const string IMMEDIATE_OR_CANCEL = "3";
        public const string FILL_OR_KILL = "4";
        public const string GOOD_TILL_CROSSING = "5";
        public const string GOOD_TILL_DATE = "6";
    }


    /// <summary>
    /// TransactTime Field
    /// </summary>/
    public sealed class TransactTime : DateTimeField
    {
        public TransactTime()
            :base(Tags.TransactTime) {}
        public TransactTime(DateTime val)
            :base(Tags.TransactTime, val) {}
        public TransactTime(DateTime val, bool showMilliseconds)
	    :base(Tags.TransactTime, val, showMilliseconds) {}

    }


    /// <summary>
    /// Urgency Field
    /// </summary>/
    public sealed class Urgency : StringField
    {
        public Urgency()
            :base(Tags.Urgency) {}
        public Urgency(string val)
            :base(Tags.Urgency, val) {}


        // Field Enumerations
        public const string NORMAL = "0";
        public const string FLASH = "1";
        public const string BACKGROUND = "2";
    }


    /// <summary>
    /// ValidUntilTime Field
    /// </summary>/
    public sealed class ValidUntilTime : DateTimeField
    {
        public ValidUntilTime()
            :base(Tags.ValidUntilTime) {}
        public ValidUntilTime(DateTime val)
            :base(Tags.ValidUntilTime, val) {}
        public ValidUntilTime(DateTime val, bool showMilliseconds)
	    :base(Tags.ValidUntilTime, val, showMilliseconds) {}

    }


    /// <summary>
    /// SettlmntTyp Field
    /// </summary>/
    public sealed class SettlmntTyp : StringField
    {
        public SettlmntTyp()
            :base(Tags.SettlmntTyp) {}
        public SettlmntTyp(string val)
            :base(Tags.SettlmntTyp, val) {}


        // Field Enumerations
        public const string REGULAR = "0";
        public const string CASH = "1";
        public const string NEXT_DAY = "2";
        public const string TPLUS2 = "3";
        public const string TPLUS3 = "4";
        public const string TPLUS4 = "5";
        public const string FUTURE = "6";
        public const string WHEN_ISSUED = "7";
        public const string SELLERS_OPTION = "8";
        public const string TPLUS5 = "9";
    }


    /// <summary>
    /// FutSettDate Field
    /// </summary>/
    public sealed class FutSettDate : DateOnlyField
    {
        public FutSettDate()
            :base(Tags.FutSettDate) {}
        public FutSettDate(DateTime val)
            :base(Tags.FutSettDate, val) {}

    }


    /// <summary>
    /// SymbolSfx Field
    /// </summary>/
    public sealed class SymbolSfx : StringField
    {
        public SymbolSfx()
            :base(Tags.SymbolSfx) {}
        public SymbolSfx(string val)
            :base(Tags.SymbolSfx, val) {}

    }


    /// <summary>
    /// ListID Field
    /// </summary>/
    public sealed class ListID : StringField
    {
        public ListID()
            :base(Tags.ListID) {}
        public ListID(string val)
            :base(Tags.ListID, val) {}

    }


    /// <summary>
    /// ListSeqNo Field
    /// </summary>/
    public sealed class ListSeqNo : IntField
    {
        public ListSeqNo()
            :base(Tags.ListSeqNo) {}
        public ListSeqNo(int val)
            :base(Tags.ListSeqNo, val) {}

    }


    /// <summary>
    /// ListNoOrds Field
    /// </summary>/
    public sealed class ListNoOrds : IntField
    {
        public ListNoOrds()
            :base(Tags.ListNoOrds) {}
        public ListNoOrds(int val)
            :base(Tags.ListNoOrds, val) {}

    }


    /// <summary>
    /// ListExecInst Field
    /// </summary>/
    public sealed class ListExecInst : StringField
    {
        public ListExecInst()
            :base(Tags.ListExecInst) {}
        public ListExecInst(string val)
            :base(Tags.ListExecInst, val) {}

    }


    /// <summary>
    /// AllocID Field
    /// </summary>/
    public sealed class AllocID : IntField
    {
        public AllocID()
            :base(Tags.AllocID) {}
        public AllocID(int val)
            :base(Tags.AllocID, val) {}

    }


    /// <summary>
    /// AllocTransType Field
    /// </summary>/
    public sealed class AllocTransType : StringField
    {
        public AllocTransType()
            :base(Tags.AllocTransType) {}
        public AllocTransType(string val)
            :base(Tags.AllocTransType, val) {}


        // Field Enumerations
        public const string NEW = "0";
        public const string REPLACE = "1";
        public const string CANCEL = "2";
    }


    /// <summary>
    /// RefAllocID Field
    /// </summary>/
    public sealed class RefAllocID : IntField
    {
        public RefAllocID()
            :base(Tags.RefAllocID) {}
        public RefAllocID(int val)
            :base(Tags.RefAllocID, val) {}

    }


    /// <summary>
    /// NoOrders Field
    /// </summary>/
    public sealed class NoOrders : IntField
    {
        public NoOrders()
            :base(Tags.NoOrders) {}
        public NoOrders(int val)
            :base(Tags.NoOrders, val) {}

    }


    /// <summary>
    /// AvgPrxPrecision Field
    /// </summary>/
    public sealed class AvgPrxPrecision : IntField
    {
        public AvgPrxPrecision()
            :base(Tags.AvgPrxPrecision) {}
        public AvgPrxPrecision(int val)
            :base(Tags.AvgPrxPrecision, val) {}

    }


    /// <summary>
    /// TradeDate Field
    /// </summary>/
    public sealed class TradeDate : DateOnlyField
    {
        public TradeDate()
            :base(Tags.TradeDate) {}
        public TradeDate(DateTime val)
            :base(Tags.TradeDate, val) {}

    }


    /// <summary>
    /// ExecBroker Field
    /// </summary>/
    public sealed class ExecBroker : StringField
    {
        public ExecBroker()
            :base(Tags.ExecBroker) {}
        public ExecBroker(string val)
            :base(Tags.ExecBroker, val) {}

    }


    /// <summary>
    /// OpenClose Field
    /// </summary>/
    public sealed class OpenClose : StringField
    {
        public OpenClose()
            :base(Tags.OpenClose) {}
        public OpenClose(string val)
            :base(Tags.OpenClose, val) {}

    }


    /// <summary>
    /// NoAllocs Field
    /// </summary>/
    public sealed class NoAllocs : IntField
    {
        public NoAllocs()
            :base(Tags.NoAllocs) {}
        public NoAllocs(int val)
            :base(Tags.NoAllocs, val) {}

    }


    /// <summary>
    /// AllocAccount Field
    /// </summary>/
    public sealed class AllocAccount : StringField
    {
        public AllocAccount()
            :base(Tags.AllocAccount) {}
        public AllocAccount(string val)
            :base(Tags.AllocAccount, val) {}

    }


    /// <summary>
    /// AllocShares Field
    /// </summary>/
    public sealed class AllocShares : IntField
    {
        public AllocShares()
            :base(Tags.AllocShares) {}
        public AllocShares(int val)
            :base(Tags.AllocShares, val) {}

    }


    /// <summary>
    /// ProcessCode Field
    /// </summary>/
    public sealed class ProcessCode : StringField
    {
        public ProcessCode()
            :base(Tags.ProcessCode) {}
        public ProcessCode(string val)
            :base(Tags.ProcessCode, val) {}


        // Field Enumerations
        public const string REGULAR = "0";
        public const string SOFT_DOLLAR = "1";
        public const string STEPIN = "2";
        public const string STEPOUT = "3";
        public const string SOFTDOLLAR_STEPIN = "4";
        public const string SOFTDOLLAR_STEPOUT = "5";
        public const string PLAN_SPONSOR = "6";
    }


    /// <summary>
    /// NoRpts Field
    /// </summary>/
    public sealed class NoRpts : IntField
    {
        public NoRpts()
            :base(Tags.NoRpts) {}
        public NoRpts(int val)
            :base(Tags.NoRpts, val) {}

    }


    /// <summary>
    /// RptSeq Field
    /// </summary>/
    public sealed class RptSeq : IntField
    {
        public RptSeq()
            :base(Tags.RptSeq) {}
        public RptSeq(int val)
            :base(Tags.RptSeq, val) {}

    }


    /// <summary>
    /// CxlQty Field
    /// </summary>/
    public sealed class CxlQty : IntField
    {
        public CxlQty()
            :base(Tags.CxlQty) {}
        public CxlQty(int val)
            :base(Tags.CxlQty, val) {}

    }


    /// <summary>
    /// NoDlvyInst Field
    /// </summary>/
    public sealed class NoDlvyInst : IntField
    {
        public NoDlvyInst()
            :base(Tags.NoDlvyInst) {}
        public NoDlvyInst(int val)
            :base(Tags.NoDlvyInst, val) {}

    }


    /// <summary>
    /// DlvyInst Field
    /// </summary>/
    public sealed class DlvyInst : StringField
    {
        public DlvyInst()
            :base(Tags.DlvyInst) {}
        public DlvyInst(string val)
            :base(Tags.DlvyInst, val) {}

    }


    /// <summary>
    /// AllocStatus Field
    /// </summary>/
    public sealed class AllocStatus : IntField
    {
        public AllocStatus()
            :base(Tags.AllocStatus) {}
        public AllocStatus(int val)
            :base(Tags.AllocStatus, val) {}


        // Field Enumerations
        public const int ACCEPTED = 0;
        public const int REJECTED = 1;
        public const int PARTIAL_ACCEPT = 2;
        public const int RECEIVED = 3;
    }


    /// <summary>
    /// AllocRejCode Field
    /// </summary>/
    public sealed class AllocRejCode : IntField
    {
        public AllocRejCode()
            :base(Tags.AllocRejCode) {}
        public AllocRejCode(int val)
            :base(Tags.AllocRejCode, val) {}


        // Field Enumerations
        public const int UNKNOWN_ACCOUNT = 0;
        public const int INCORRECT_QUANTITY = 1;
        public const int INCORRECT_AVERAGE_PRICE = 2;
        public const int UNKNOWN_EXECUTING_BROKER_MNEMONIC = 3;
        public const int COMMISSION_DIFFERENCE = 4;
        public const int UNKNOWN_ORDERID = 5;
        public const int UNKNOWN_LISTID = 6;
        public const int OTHER = 7;
    }


    /// <summary>
    /// Signature Field
    /// </summary>/
    public sealed class Signature : StringField
    {
        public Signature()
            :base(Tags.Signature) {}
        public Signature(string val)
            :base(Tags.Signature, val) {}

    }


    /// <summary>
    /// SecureDataLen Field
    /// </summary>/
    public sealed class SecureDataLen : IntField
    {
        public SecureDataLen()
            :base(Tags.SecureDataLen) {}
        public SecureDataLen(int val)
            :base(Tags.SecureDataLen, val) {}

    }


    /// <summary>
    /// SecureData Field
    /// </summary>/
    public sealed class SecureData : StringField
    {
        public SecureData()
            :base(Tags.SecureData) {}
        public SecureData(string val)
            :base(Tags.SecureData, val) {}

    }


    /// <summary>
    /// BrokerOfCredit Field
    /// </summary>/
    public sealed class BrokerOfCredit : StringField
    {
        public BrokerOfCredit()
            :base(Tags.BrokerOfCredit) {}
        public BrokerOfCredit(string val)
            :base(Tags.BrokerOfCredit, val) {}

    }


    /// <summary>
    /// SignatureLength Field
    /// </summary>/
    public sealed class SignatureLength : IntField
    {
        public SignatureLength()
            :base(Tags.SignatureLength) {}
        public SignatureLength(int val)
            :base(Tags.SignatureLength, val) {}

    }


    /// <summary>
    /// EmailType Field
    /// </summary>/
    public sealed class EmailType : StringField
    {
        public EmailType()
            :base(Tags.EmailType) {}
        public EmailType(string val)
            :base(Tags.EmailType, val) {}


        // Field Enumerations
        public const string NEW = "0";
        public const string REPLY = "1";
        public const string ADMIN_REPLY = "2";
    }


    /// <summary>
    /// RawDataLength Field
    /// </summary>/
    public sealed class RawDataLength : IntField
    {
        public RawDataLength()
            :base(Tags.RawDataLength) {}
        public RawDataLength(int val)
            :base(Tags.RawDataLength, val) {}

    }


    /// <summary>
    /// RawData Field
    /// </summary>/
    public sealed class RawData : StringField
    {
        public RawData()
            :base(Tags.RawData) {}
        public RawData(string val)
            :base(Tags.RawData, val) {}

    }


    /// <summary>
    /// PossResend Field
    /// </summary>/
    public sealed class PossResend : StringField
    {
        public PossResend()
            :base(Tags.PossResend) {}
        public PossResend(string val)
            :base(Tags.PossResend, val) {}

    }


    /// <summary>
    /// StopPx Field
    /// </summary>/
    public sealed class StopPx : DecimalField
    {
        public StopPx()
            :base(Tags.StopPx) {}
        public StopPx(Decimal val)
            :base(Tags.StopPx, val) {}

    }


    /// <summary>
    /// ExDestination Field
    /// </summary>/
    public sealed class ExDestination : StringField
    {
        public ExDestination()
            :base(Tags.ExDestination) {}
        public ExDestination(string val)
            :base(Tags.ExDestination, val) {}


        // Field Enumerations
        public const string NONE = "0";
        public const string POSIT = "4";
    }


    /// <summary>
    /// CxlRejReason Field
    /// </summary>/
    public sealed class CxlRejReason : IntField
    {
        public CxlRejReason()
            :base(Tags.CxlRejReason) {}
        public CxlRejReason(int val)
            :base(Tags.CxlRejReason, val) {}


        // Field Enumerations
        public const int TOO_LATE_TO_CANCEL = 0;
        public const int UNKNOWN_ORDER = 1;
    }


    /// <summary>
    /// OrdRejReason Field
    /// </summary>/
    public sealed class OrdRejReason : IntField
    {
        public OrdRejReason()
            :base(Tags.OrdRejReason) {}
        public OrdRejReason(int val)
            :base(Tags.OrdRejReason, val) {}


        // Field Enumerations
        public const int BROKER_OPTION = 0;
        public const int UNKNOWN_SYMBOL = 1;
        public const int EXCHANGE_CLOSED = 2;
        public const int ORDER_EXCEEDS_LIMIT = 3;
        public const int TOO_LATE_TO_ENTER = 4;
    }


    /// <summary>
    /// IOIQualifier Field
    /// </summary>/
    public sealed class IOIQualifier : StringField
    {
        public IOIQualifier()
            :base(Tags.IOIQualifier) {}
        public IOIQualifier(string val)
            :base(Tags.IOIQualifier, val) {}


        // Field Enumerations
        public const string CROSSING_OPPORTUNITY = "X";
        public const string AT_THE_OPEN = "O";
        public const string MORE_BEHIND = "M";
        public const string TAKING_A_POSITION = "P";
        public const string VERSUS = "V";
        public const string CURRENT_QUOTE = "Q";
        public const string AT_THE_CLOSE = "C";
        public const string PORTFOLIO_SHOWN = "S";
        public const string IN_TOUCH_WITH = "I";
        public const string INDICATION_WORKING_AWAY = "W";
        public const string ALL_OR_NONE = "A";
        public const string LIMIT = "L";
        public const string THROUGH_THE_DAY = "T";
    }


    /// <summary>
    /// WaveNo Field
    /// </summary>/
    public sealed class WaveNo : StringField
    {
        public WaveNo()
            :base(Tags.WaveNo) {}
        public WaveNo(string val)
            :base(Tags.WaveNo, val) {}

    }


    /// <summary>
    /// Issuer Field
    /// </summary>/
    public sealed class Issuer : StringField
    {
        public Issuer()
            :base(Tags.Issuer) {}
        public Issuer(string val)
            :base(Tags.Issuer, val) {}

    }


    /// <summary>
    /// SecurityDesc Field
    /// </summary>/
    public sealed class SecurityDesc : StringField
    {
        public SecurityDesc()
            :base(Tags.SecurityDesc) {}
        public SecurityDesc(string val)
            :base(Tags.SecurityDesc, val) {}

    }


    /// <summary>
    /// ClientID Field
    /// </summary>/
    public sealed class ClientID : StringField
    {
        public ClientID()
            :base(Tags.ClientID) {}
        public ClientID(string val)
            :base(Tags.ClientID, val) {}

    }


    /// <summary>
    /// MinQty Field
    /// </summary>/
    public sealed class MinQty : IntField
    {
        public MinQty()
            :base(Tags.MinQty) {}
        public MinQty(int val)
            :base(Tags.MinQty, val) {}

    }


    /// <summary>
    /// MaxFloor Field
    /// </summary>/
    public sealed class MaxFloor : IntField
    {
        public MaxFloor()
            :base(Tags.MaxFloor) {}
        public MaxFloor(int val)
            :base(Tags.MaxFloor, val) {}

    }


    /// <summary>
    /// ReportToExch Field
    /// </summary>/
    public sealed class ReportToExch : StringField
    {
        public ReportToExch()
            :base(Tags.ReportToExch) {}
        public ReportToExch(string val)
            :base(Tags.ReportToExch, val) {}


        // Field Enumerations
        public const string YES = "Y";
        public const string NO = "N";
    }


    /// <summary>
    /// LocateReqd Field
    /// </summary>/
    public sealed class LocateReqd : StringField
    {
        public LocateReqd()
            :base(Tags.LocateReqd) {}
        public LocateReqd(string val)
            :base(Tags.LocateReqd, val) {}


        // Field Enumerations
        public const string YES = "Y";
        public const string NO = "N";
    }


    /// <summary>
    /// QuoteID Field
    /// </summary>/
    public sealed class QuoteID : StringField
    {
        public QuoteID()
            :base(Tags.QuoteID) {}
        public QuoteID(string val)
            :base(Tags.QuoteID, val) {}

    }


    /// <summary>
    /// NetMoney Field
    /// </summary>/
    public sealed class NetMoney : DecimalField
    {
        public NetMoney()
            :base(Tags.NetMoney) {}
        public NetMoney(Decimal val)
            :base(Tags.NetMoney, val) {}

    }


    /// <summary>
    /// SettlCurrAmt Field
    /// </summary>/
    public sealed class SettlCurrAmt : DecimalField
    {
        public SettlCurrAmt()
            :base(Tags.SettlCurrAmt) {}
        public SettlCurrAmt(Decimal val)
            :base(Tags.SettlCurrAmt, val) {}

    }


    /// <summary>
    /// SettlCurrency Field
    /// </summary>/
    public sealed class SettlCurrency : StringField
    {
        public SettlCurrency()
            :base(Tags.SettlCurrency) {}
        public SettlCurrency(string val)
            :base(Tags.SettlCurrency, val) {}

    }


    /// <summary>
    /// ForexReq Field
    /// </summary>/
    public sealed class ForexReq : StringField
    {
        public ForexReq()
            :base(Tags.ForexReq) {}
        public ForexReq(string val)
            :base(Tags.ForexReq, val) {}


        // Field Enumerations
        public const string YES = "Y";
        public const string NO = "N";
    }


    /// <summary>
    /// NoExecs Field
    /// </summary>/
    public sealed class NoExecs : IntField
    {
        public NoExecs()
            :base(Tags.NoExecs) {}
        public NoExecs(int val)
            :base(Tags.NoExecs, val) {}

    }


    /// <summary>
    /// CxlType Field
    /// </summary>/
    public sealed class CxlType : StringField
    {
        public CxlType()
            :base(Tags.CxlType) {}
        public CxlType(string val)
            :base(Tags.CxlType, val) {}


        // Field Enumerations
        public const string PARTIAL_CANCEL = "P";
        public const string FULL_REMAINING_QUANTITY = "F";
    }


    /// <summary>
    /// ExpireTime Field
    /// </summary>/
    public sealed class ExpireTime : DateTimeField
    {
        public ExpireTime()
            :base(Tags.ExpireTime) {}
        public ExpireTime(DateTime val)
            :base(Tags.ExpireTime, val) {}
        public ExpireTime(DateTime val, bool showMilliseconds)
	    :base(Tags.ExpireTime, val, showMilliseconds) {}

    }


    /// <summary>
    /// DKReason Field
    /// </summary>/
    public sealed class DKReason : StringField
    {
        public DKReason()
            :base(Tags.DKReason) {}
        public DKReason(string val)
            :base(Tags.DKReason, val) {}


        // Field Enumerations
        public const string UNKNOWN_SYMBOL = "A";
        public const string WRONG_SIDE = "B";
        public const string QUANTITY_EXCEEDS_ORDER = "C";
        public const string NO_MATCHING_ORDER = "D";
        public const string PRICE_EXCEEDS_LIMIT = "E";
        public const string OTHER = "Z";
    }


    /// <summary>
    /// IOINaturalFlag Field
    /// </summary>/
    public sealed class IOINaturalFlag : StringField
    {
        public IOINaturalFlag()
            :base(Tags.IOINaturalFlag) {}
        public IOINaturalFlag(string val)
            :base(Tags.IOINaturalFlag, val) {}


        // Field Enumerations
        public const string NATURAL = "Y";
        public const string NOT_NATURAL = "N";
    }


    /// <summary>
    /// QuoteReqID Field
    /// </summary>/
    public sealed class QuoteReqID : StringField
    {
        public QuoteReqID()
            :base(Tags.QuoteReqID) {}
        public QuoteReqID(string val)
            :base(Tags.QuoteReqID, val) {}

    }


    /// <summary>
    /// BidPx Field
    /// </summary>/
    public sealed class BidPx : DecimalField
    {
        public BidPx()
            :base(Tags.BidPx) {}
        public BidPx(Decimal val)
            :base(Tags.BidPx, val) {}

    }


    /// <summary>
    /// OfferPx Field
    /// </summary>/
    public sealed class OfferPx : DecimalField
    {
        public OfferPx()
            :base(Tags.OfferPx) {}
        public OfferPx(Decimal val)
            :base(Tags.OfferPx, val) {}

    }


    /// <summary>
    /// BidSize Field
    /// </summary>/
    public sealed class BidSize : IntField
    {
        public BidSize()
            :base(Tags.BidSize) {}
        public BidSize(int val)
            :base(Tags.BidSize, val) {}

    }


    /// <summary>
    /// OfferSize Field
    /// </summary>/
    public sealed class OfferSize : IntField
    {
        public OfferSize()
            :base(Tags.OfferSize) {}
        public OfferSize(int val)
            :base(Tags.OfferSize, val) {}

    }


    /// <summary>
    /// NoMiscFees Field
    /// </summary>/
    public sealed class NoMiscFees : IntField
    {
        public NoMiscFees()
            :base(Tags.NoMiscFees) {}
        public NoMiscFees(int val)
            :base(Tags.NoMiscFees, val) {}

    }


    /// <summary>
    /// MiscFeeAmt Field
    /// </summary>/
    public sealed class MiscFeeAmt : DecimalField
    {
        public MiscFeeAmt()
            :base(Tags.MiscFeeAmt) {}
        public MiscFeeAmt(Decimal val)
            :base(Tags.MiscFeeAmt, val) {}

    }


    /// <summary>
    /// MiscFeeCurr Field
    /// </summary>/
    public sealed class MiscFeeCurr : StringField
    {
        public MiscFeeCurr()
            :base(Tags.MiscFeeCurr) {}
        public MiscFeeCurr(string val)
            :base(Tags.MiscFeeCurr, val) {}

    }


    /// <summary>
    /// MiscFeeType Field
    /// </summary>/
    public sealed class MiscFeeType : StringField
    {
        public MiscFeeType()
            :base(Tags.MiscFeeType) {}
        public MiscFeeType(string val)
            :base(Tags.MiscFeeType, val) {}


        // Field Enumerations
        public const string REGULATORY = "1";
        public const string TAX = "2";
        public const string LOCAL_COMMISSION = "3";
        public const string EXCHANGE_FEES = "4";
        public const string STAMP = "5";
        public const string LEVY = "6";
        public const string OTHER = "7";
    }


    /// <summary>
    /// PrevClosePx Field
    /// </summary>/
    public sealed class PrevClosePx : DecimalField
    {
        public PrevClosePx()
            :base(Tags.PrevClosePx) {}
        public PrevClosePx(Decimal val)
            :base(Tags.PrevClosePx, val) {}

    }


}
