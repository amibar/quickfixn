//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
// </auto-generated>
//------------------------------------------------------------------------------

using System.IO;
using System.Reflection;

namespace QuickFix
{
    namespace FIX41
    {
        public class MessageFactory : IMessageFactory
        {
            private static readonly DataDictionary.DataDictionary _dataDictionary;
            public DataDictionary.DataDictionary DataDictionary => _dataDictionary;

            public FIXVersion[] SupportedFIXVersions { get; } = { FIXVersion.FIX41, };

            static MessageFactory()
            {
                using (Stream stream = Assembly.GetExecutingAssembly().GetManifestResourceStream("QuickFix.FIX41.FIX41.xml"))
                {
                    _dataDictionary = new DataDictionary.DataDictionary();
                    _dataDictionary.Load(stream);
                }
            }

            public QuickFix.Message Create(string beginString, string msgType)
            {
                int mt = MsgTypes.GetMsgType(msgType);
            
                switch (mt)
                {
                    case MsgTypes.Heartbeat: return new Heartbeat();
                    case MsgTypes.Logon: return new Logon();
                    case MsgTypes.TestRequest: return new TestRequest();
                    case MsgTypes.ResendRequest: return new ResendRequest();
                    case MsgTypes.Reject: return new Reject();
                    case MsgTypes.SequenceReset: return new SequenceReset();
                    case MsgTypes.Logout: return new Logout();
                    case MsgTypes.Advertisement: return new Advertisement();
                    case MsgTypes.IndicationofInterest: return new IndicationofInterest();
                    case MsgTypes.News: return new News();
                    case MsgTypes.Email: return new Email();
                    case MsgTypes.QuoteRequest: return new QuoteRequest();
                    case MsgTypes.Quote: return new Quote();
                    case MsgTypes.NewOrderSingle: return new NewOrderSingle();
                    case MsgTypes.ExecutionReport: return new ExecutionReport();
                    case MsgTypes.DontKnowTrade: return new DontKnowTrade();
                    case MsgTypes.OrderCancelReplaceRequest: return new OrderCancelReplaceRequest();
                    case MsgTypes.OrderCancelRequest: return new OrderCancelRequest();
                    case MsgTypes.OrderCancelReject: return new OrderCancelReject();
                    case MsgTypes.OrderStatusRequest: return new OrderStatusRequest();
                    case MsgTypes.Allocation: return new Allocation();
                    case MsgTypes.AllocationACK: return new AllocationACK();
                    case MsgTypes.SettlementInstructions: return new SettlementInstructions();
                    case MsgTypes.NewOrderList: return new NewOrderList();
                    case MsgTypes.ListStatus: return new ListStatus();
                    case MsgTypes.ListExecute: return new ListExecute();
                    case MsgTypes.ListCancelRequest: return new ListCancelRequest();
                    case MsgTypes.ListStatusRequest: return new ListStatusRequest();
                }

                if (SupportedFIXVersions[0].IsFIXT && Message.IsAdminMsgType(msgType))
                {
                    QuickFix.Message m = new QuickFix.Message();
                    m.Header.SetField(new QuickFix.Fields.StringField(QuickFix.Fields.Tags.MsgType, msgType));
                    return m;
                }

                return new QuickFix.Message();
            }


            public Group Create(string beginString, string msgType, int correspondingFieldID)
            {
                int mt = MsgTypes.GetMsgType(msgType);
                
                switch(mt)
                {
                    case MsgTypes.IndicationofInterest:
                    {
                        switch (correspondingFieldID)
                        {
                            case Tags.NoIOIQualifiers: return new IndicationofInterest.NoIOIQualifiersGroup();
                        }
                        break;
                    }

                    case MsgTypes.News:
                    {
                        switch (correspondingFieldID)
                        {
                            case Tags.NoRelatedSym: return new News.NoRelatedSymGroup();
                            case Tags.LinesOfText: return new News.LinesOfTextGroup();
                        }
                        break;
                    }

                    case MsgTypes.Email:
                    {
                        switch (correspondingFieldID)
                        {
                            case Tags.NoRelatedSym: return new Email.NoRelatedSymGroup();
                            case Tags.LinesOfText: return new Email.LinesOfTextGroup();
                        }
                        break;
                    }

                    case MsgTypes.Allocation:
                    {
                        switch (correspondingFieldID)
                        {
                            case Tags.NoOrders: return new Allocation.NoOrdersGroup();
                            case Tags.NoExecs: return new Allocation.NoExecsGroup();
                            case Tags.NoAllocs: return new Allocation.NoAllocsGroup();
                            case Tags.NoMiscFees: return new Allocation.NoAllocsGroup.NoMiscFeesGroup();
                        }
                        break;
                    }

                    case MsgTypes.ListStatus:
                    {
                        switch (correspondingFieldID)
                        {
                            case Tags.NoOrders: return new ListStatus.NoOrdersGroup();
                        }
                        break;
                    }

                }
                return null;
            }

        }
    }
}
